# cloudbuild.yaml ─ revised

steps:
# ───────────────────────────── 1) BUILD & PUSH IMAGE ───────────────────────────
- id: build-image
  name: gcr.io/cloud-builders/docker
  args:
    - build
    - '--tag=us-central1-docker.pkg.dev/${PROJECT_ID}/restaurant-app/restaurant-app:${SHORT_SHA}'
    - '--tag=us-central1-docker.pkg.dev/${PROJECT_ID}/restaurant-app/restaurant-app:latest'
    - '.'

- id: push-sha-image
  name: gcr.io/cloud-builders/docker
  args: ['push','us-central1-docker.pkg.dev/${PROJECT_ID}/restaurant-app/restaurant-app:${SHORT_SHA}']
  waitFor: ['build-image']

- id: push-latest-image
  name: gcr.io/cloud-builders/docker
  args: ['push','us-central1-docker.pkg.dev/${PROJECT_ID}/restaurant-app/restaurant-app:latest']
  waitFor: ['build-image']

# ───────────────────── 2) DEPLOY TO CLOUD RUN (only _prod_) ────────────────────
#- id: deploy-to-cloud-run
#  name: gcr.io/cloud-builders/gcloud
#  entrypoint: bash
#  args:
#    - -c
#    - |
#      if [[ "$_TARGET_ENV" == "prod" ]]; then
#        echo "🔄 Deploying to Cloud Run (prod)…"
#        gcloud run deploy restaurant-app \
#          --image=us-central1-docker.pkg.dev/$PROJECT_ID/restaurant-app/restaurant-app:latest \
#          --revision-suffix=sha-${SHORT_SHA} \
#          --region=us-central1 \
#          --platform=managed \
#          --allow-unauthenticated \
#          --project=${PROJECT_ID}
#      else
#        echo "Skipping Cloud Run deployment – _TARGET_ENV=${_TARGET_ENV}"
#      fi
#  waitFor: ['push-latest-image']

# ─────────────── 3) OPTIONAL 10 % CANARY SPLIT (only _prod_) ───────────────────
#- id: canary-split-cloud-run
#  name: gcr.io/cloud-builders/gcloud
#  entrypoint: bash
#  args:
#    - -c
#    - |
#      if [[ "$_TARGET_ENV" == "prod" ]]; then
#        echo "🔍 Fetching revisions for canary split…"
#        revs=$(gcloud run revisions list \
#                 --service=restaurant-app \
#                 --region=us-central1 \
#                 --platform=managed \
#                 --sort-by="~metadata.creationTimestamp" \
#                 --limit=2 \
#                 --format="value(metadata.name)" \
#                 --project=${PROJECT_ID}) || exit 0
#        readarray -t arr <<< "$revs"
#        new="${arr[0]}"
#        prev="${arr[1]:-}"
#        [[ -z "$new" ]] && { echo "No revision found – skipping"; exit 0; }
#       if [[ -n "$prev" ]]; then
#          echo "🪄 10 % → $new, 90 % → $prev"
#          gcloud run services update-traffic restaurant-app \
#            --region=us-central1 --platform=managed \
#            --to-revisions="$new=10,$prev=90" \
#            --project=${PROJECT_ID}
#        else
#          echo "Single revision – 100 % traffic on $new"
#        fi
#      else
#        echo "Skipping canary – _TARGET_ENV=${_TARGET_ENV}"
#      fi
#  waitFor: ['deploy-to-cloud-run']

# ─────────────────────────── 4) OPTIONAL DEBUG STEP ────────────────────────────
- id: debug-file-listing
  name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
  entrypoint: bash
  args:
    - -c
    - |
      echo "--- $(pwd) ---"; ls -la
      echo "--- ./charts ---"; ls -la ./charts || true
      echo "--- ./charts/restaurant-app ---"; ls -la ./charts/restaurant-app || true
  waitFor: ['push-sha-image']

# ──────────────── 5) TERRAFORM – DEPLOY STAGING GKE (prod only) ───────────────
- name: hashicorp/terraform:1.5.7
  id: Terraform Deploy Staging GKE
  dir: infra
  entrypoint: sh
  args:
    - -c
    - |
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "▶️  Terraform: helm_release.staging (${SHORT_SHA})"
        terraform init
        terraform apply -auto-approve \
          -var="image_tag=${SHORT_SHA}" \
          -target=helm_release.staging
      else
        echo "Skipping staging deploy – _TARGET_ENV=${_TARGET_ENV}"
      fi
  waitFor: ['push-sha-image','debug-file-listing']

# ─────────────── 6) MANUAL APPROVAL GATE (prod only) ──────────────────────────
- name: gcr.io/cloud-builders/gcloud
  id: Hold for Production Approval
  entrypoint: bash
  args:
    - -c
    - |
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "WAITING FOR MANUAL APPROVAL"
      else
        echo "Approval step not needed"
      fi
  waitFor: ['Terraform Deploy Staging GKE']

# ──────────────── 7) TERRAFORM – DEPLOY PROD GKE (prod only) ──────────────────
- name: hashicorp/terraform:1.5.7
  id: Terraform Deploy Production GKE
  dir: infra
  entrypoint: sh
  args:
    - -c
    - |
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "▶️  Terraform: helm_release.production (${SHORT_SHA})"
        terraform init
        terraform apply -auto-approve \
          -var="image_tag=${SHORT_SHA}" \
          -target=helm_release.production
      else
        echo "Skipping prod deploy – _TARGET_ENV=${_TARGET_ENV}"
      fi
  waitFor: ['Hold for Production Approval']

# ───────────────────────────── OPTIONS / SUBSTITUTIONS ────────────────────────
options:
  logging: CLOUD_LOGGING_ONLY   # keep build logs in Cloud Logging

